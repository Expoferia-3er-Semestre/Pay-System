/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package expoferia.pagos.gestionpagos.gui.modulos;

/**
 *
 * @author Suglin
 */

import expoferia.pagos.gestionpagos.dao.EmpleadoDAO;
import expoferia.pagos.gestionpagos.dao.EstudianteDAO;
import expoferia.pagos.gestionpagos.dao.RepresentanteDAO;
import expoferia.pagos.gestionpagos.dao.TipoPagoDAO;
import expoferia.pagos.gestionpagos.entidades.Empleado;
import expoferia.pagos.gestionpagos.entidades.Estudiante;
import expoferia.pagos.gestionpagos.entidades.Representante;
import expoferia.pagos.gestionpagos.entidades.TipoPago;
import expoferia.pagos.gestionpagos.gui.HomeAdmin;
import expoferia.pagos.gestionpagos.gui.PanelRound;
import expoferia.pagos.gestionpagos.gui.tabla.Tabla;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

public class PanelDefault extends JPanel {
    private Tabla tabla;
    private String Titulo;
    /**
     * Creates new form PanelRepresentante
     */

    public PanelDefault(String nombresColumnas,
                        String nombreModulo) {
        Titulo=nombreModulo;

        initComponents();
        jLabel8.setText("Gestión de "+ Titulo);
        List<String> listaColumnas = new ArrayList<>();
        listaColumnas.addAll(Arrays.asList(nombresColumnas.split(" ")));

        DefaultTableModel modelo= new DefaultTableModel();

        if (nombreModulo.equals("Representantes")){

            modelo.setColumnIdentifiers(nombresColumnas.split(" "));
            RepresentanteDAO rdao=new RepresentanteDAO();
            List<Representante> listaRepresentantes=rdao.lista(null, null);
            for (Representante rep : listaRepresentantes) {
                modelo.addRow(new Object[] {
                        rep.getId(),
                        rep.getCedula(),
                        rep.getNombre1()+" "+rep.getNombre2(),
                        rep.getApellido1()+" "+rep.getApellido2()});
            }

        }

        if (nombreModulo.equals("Empleados")) {

            modelo.setColumnIdentifiers(nombresColumnas.split(" "));
            EmpleadoDAO edao=new EmpleadoDAO();
            List<Empleado> listaEmpleados=edao.lista(null, null);
            for (Empleado emp : listaEmpleados) {
                modelo.addRow(new Object[] {
                        emp.getId(),
                        emp.getCedula(),
                        emp.getNombre1()+" "+emp.getNombre2(),
                        emp.getApellido1()+" "+emp.getApellido2(),
                        emp.getRol() ? "Admin" : "Cajero"});
            }

        }

        if (nombreModulo.equals("Estudiantes")) {

            modelo.setColumnIdentifiers(nombresColumnas.split(" "));
            EstudianteDAO esdao=new EstudianteDAO();
            List<Estudiante> listaEstudiantes=esdao.lista(null, null);
            for (Estudiante est : listaEstudiantes) {
                modelo.addRow(new Object[] {
                        est.getId(),
                        est.getCedulaRep(),
                        est.getNombre1()+" "+est.getNombre2(),
                        est.getApellido1()+" "+est.getApellido2(),
                });
            }

        }

        if (nombreModulo.equals("Tipos de Pagos")) {
            modelo.setColumnIdentifiers(nombresColumnas.split(" "));
            TipoPagoDAO tpDao=new TipoPagoDAO();
            List<TipoPago> listaTiposPagos=tpDao.listar(null, null);
            for (TipoPago tp : listaTiposPagos) {
                modelo.addRow(new Object[] {
                        tp.getId(),
                        tp.getConcepto(),
                        tp.getCategoria(),
                        tp.getCosto()
                });
            }
        }
        tabla=new Tabla();
        tabla.setModel(modelo);

        panelTabla.setLayout(new BorderLayout());
        JScrollPane scrollPane=new JScrollPane(tabla);
        panelTabla.add(scrollPane, BorderLayout.CENTER);
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDefault = new PanelRound();
        jLabel8 = new JLabel();
        registrarButton = new JButton();
        actualizarButton = new JButton();
        archivarButton = new JButton();
        jComboBox1 = new JComboBox<>();
        jLabel1 = new JLabel();
        panelTabla = new PanelRound();

        panelDefault.setBackground(new Color(255, 255, 255));
        panelDefault.setRoundBottomLeft(30);
        panelDefault.setRoundBottomRight(30);
        panelDefault.setRoundTopLeft(30);
        panelDefault.setRoundTopRight(30);

        jLabel8.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new Color(10, 72, 162));
        jLabel8.setText("Gestión de Representantes");

        registrarButton.setBackground(new Color(3, 105, 173));
        registrarButton.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
        registrarButton.setForeground(new Color(255, 255, 255));
        registrarButton.setText("Agregar");
        registrarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                registrarButtonActionPerformed(evt);
            }
        });

        actualizarButton.setBackground(new Color(3, 105, 173));
        actualizarButton.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
        actualizarButton.setForeground(new Color(255, 255, 255));
        actualizarButton.setText("Actualizar");
        actualizarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actualizarButtonActionPerformed(evt);
            }
        });

        archivarButton.setBackground(new Color(255, 51, 51));
        archivarButton.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
        archivarButton.setForeground(new Color(255, 255, 255));
        archivarButton.setText("Archivar");

        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[] { "Buscar ", "ID Trabajador ", "Cedula ", "Nombre " }));

        jLabel1.setIcon(new ImageIcon(getClass().getResource("/imagenes/close.png"))); // NOI18N

        panelTabla.setBackground(new Color(255, 255, 255));
        panelTabla.setRoundBottomLeft(30);
        panelTabla.setRoundBottomRight(30);
        panelTabla.setRoundTopLeft(30);
        panelTabla.setRoundTopRight(30);

        GroupLayout panelTablaLayout = new GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
        );

        GroupLayout panelRepresentantesLayout = new GroupLayout(panelDefault);
        panelDefault.setLayout(panelRepresentantesLayout);
        panelRepresentantesLayout.setHorizontalGroup(
            panelRepresentantesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelRepresentantesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panelRepresentantesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(panelRepresentantesLayout.createSequentialGroup()
                        .addComponent(registrarButton)
                        .addGap(32, 32, 32)
                        .addComponent(actualizarButton)
                        .addGap(34, 34, 34)
                        .addComponent(archivarButton)
                        .addGap(43, 43, 43)
                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1))
                    .addComponent(jLabel8))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panelTabla, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelRepresentantesLayout.setVerticalGroup(
            panelRepresentantesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, panelRepresentantesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(panelRepresentantesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(panelRepresentantesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(registrarButton)
                        .addComponent(actualizarButton)
                        .addComponent(archivarButton)
                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(panelTabla, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(panelDefault, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(panelDefault, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void registrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarButtonActionPerformed
        // TODO add your handling code here:
        CardLayout card = HomeAdmin.card;
        PanelRound panelCambiante = HomeAdmin.panelCambiante;

        List<String> listaComponentes= componentsList(Titulo);
        FormularioEntidad formularioEntidad=new FormularioEntidad(Titulo, listaComponentes);

        panelCambiante.add(formularioEntidad, Titulo);
        card.show(panelCambiante, Titulo);
        panelCambiante.revalidate();
        panelCambiante.repaint();

    }//GEN-LAST:event_registrarButtonActionPerformed

    private void actualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_actualizarButtonActionPerformed

    private List<String> componentsList(String modulo) {
        Map<String, List<String>> camposPorTipo = new HashMap<>();
        camposPorTipo.put("Representantes", Arrays.asList(
                "Nombres", "Apellidos", "Cedula", "Teléfono", "Dirección", "Fecha de Nacimiento", "Correo"));
        camposPorTipo.put("Empleados", Arrays.asList(
                "Nombres", "Apellidos", "Cedula", "Teléfono", "Correo","Dirección", "Fecha de Nacimiento", "Contraseña", "Confirmar contraseña", "Rol"));
        camposPorTipo.put("Estudiantes", Arrays.asList(
                "Nombres", "Apellidos", "Cedula Representante", "Teléfono", "Fecha de Nacimiento", "Dirección"));
        camposPorTipo.put("Tipos de Pagos", Arrays.asList(
                "Concepto", "Categoría", "Costo"));
        return camposPorTipo.get(modulo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton actualizarButton;
    private JButton archivarButton;
    private JComboBox<String> jComboBox1;
    private JLabel jLabel1;
    private JLabel jLabel8;
    private expoferia.pagos.gestionpagos.gui.PanelRound panelDefault;
    private expoferia.pagos.gestionpagos.gui.PanelRound panelTabla;
    private JButton registrarButton;
    // End of variables declaration//GEN-END:variables
}
